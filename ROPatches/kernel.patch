diff -x TokHelpSrc -Naur orig/Kernel/s/ARM600 ckernel/Kernel/s/ARM600
--- orig/Kernel/s/ARM600	2021-04-28 15:27:07.000000000 +0200
+++ ckernel/Kernel/s/ARM600	2024-11-02 13:01:02.110000000 +0100
@@ -225,10 +225,6 @@
         GenPPLAccess 2_101101
         DCD     -1
 
-        =       0                       ; So PageShifts-1 is word aligned
-PageShifts
-        =       12, 13, 0, 14           ; 1 2 3 4
-        =       0,  0,  0, 15           ; 5 6 7 8
         ALIGN
 
         LTORG
diff -x TokHelpSrc -Naur orig/Kernel/s/Arthur3 ckernel/Kernel/s/Arthur3
--- orig/Kernel/s/Arthur3	2021-02-10 14:53:35.000000000 +0100
+++ ckernel/Kernel/s/Arthur3	2024-11-02 13:00:36.630000000 +0100
@@ -147,6 +147,12 @@
         =       "IsString:Expression is a string", 0
         ALIGN
 
+        =       0                       ; So PageShifts-1 is word aligned
+PageShifts
+        =       12, 13, 0, 14           ; 1 2 3 4
+        =       0,  0,  0, 15           ; 5 6 7 8
+        ALIGN
+
 ;************************************************************************
 ; the expression analysis SWI
 
diff -x TokHelpSrc -Naur orig/Kernel/s/ArthurSWIs ckernel/Kernel/s/ArthurSWIs
--- orig/Kernel/s/ArthurSWIs	2018-04-20 00:08:28.000000000 +0200
+++ ckernel/Kernel/s/ArthurSWIs	2024-11-04 19:08:36.720000000 +0100
@@ -526,6 +526,14 @@
 
       LTORG
 
+  [ CKernel
+NOIRQ   ROUT
+        BKPT    &ffd8
+DefEvent
+        BKPT    &ffd7
+  ]
+
+        EXPORT  defaultvectab ; Export for CKernel
 defaultvectab
    & 0, 0, NaffVector           ; UserV  * &00
    & 0, 0, ErrHandler           ; ErrorV * &01
@@ -795,6 +803,11 @@
                                ; registers preserved.
        Push    "R9-R12, lr"
 
+   [ CKernel
+       ; Won't recurse, handled by new Legacy code
+       SWI     XOS_ServiceCall
+       Pull    "R9-R12, PC"
+   |
        CMP      R1, #Service_ClaimFIQ
        CMPNE    R1, #Service_ClaimFIQinBackground
        BEQ      FIQclaim
@@ -1104,6 +1117,8 @@
        LDMFD   R13!, {R0-R3,PC}^
 FIQKiller_ws
 
+   ] ; CKernel
+
 
 ;************************************************
 ; SWI to call a vector
diff -x TokHelpSrc -Naur orig/Kernel/s/ChangeDyn ckernel/Kernel/s/ChangeDyn
--- orig/Kernel/s/ChangeDyn	2021-07-28 15:36:08.000000000 +0200
+++ ckernel/Kernel/s/ChangeDyn	2024-11-02 12:09:54.280000000 +0100
@@ -14,6 +14,8 @@
 ;
         TTL   => ChangeDyn
 
+  [ CKernel
+  |
         ; OS_ChangeDynamicArea optimisations:
 
         GBLL  FastCDA_Bulk ; Do all cache/TLB maintenance in bulk instead of on a per-page basis
@@ -4207,6 +4209,7 @@
         ADD     r6, lr, r2                              ; now r2 = start addr, r6 = end+1
         MOV     r1, r7
         EXIT
+  ] ; CKernel
 
 ;**************************************************************************
 
@@ -4382,6 +4385,8 @@
 ; out:  -
 ;
 
+  [ CKernel
+  |
 InitDynamicAreas Entry "r0-r12"
         LDR     lr, =ZeroPage+AppSpaceDANode
         ADRL    r0, InitAppSpaceTable
@@ -7441,5 +7446,6 @@
         DebugReg r0
         B        .
       ] ; PMPParanoid
+  ] ; CKernel
 
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/GetAll ckernel/Kernel/s/GetAll
--- orig/Kernel/s/GetAll	2023-01-14 12:42:56.000000000 +0100
+++ ckernel/Kernel/s/GetAll	2024-12-09 12:13:08.990000000 +0100
@@ -86,20 +86,26 @@
         GET     hdr.KernelWS
         GET     hdr.KeyWS
         GET     hdr.Copro15ops ; some macros
+  [ :LNOT: CKernel
         GET     hdr.ARMops
-
+  ]
         GET     s.Kernel
+  [ :LNOT: CKernel
         GET     s.ARMops
+  ]
         GET     s.NewIRQs
+
         GET     s.Oscli
         GET     s.HeapMan
         GET     s.ModHand
         $GetUnsqueeze
         GET     s.ArthurSWIs
+  [ :LNOT: CKernel
         $GetKernelMEMC
         GET     s.Exceptions
-        GET     s.ChangeDyn
         GET     s.HAL
+  ]
+        GET     s.ChangeDyn
         GET     s.Arthur2
         GET     s.LibKern
         GET     s.Utility
@@ -107,7 +113,9 @@
         GET     s.SysComms
         GET     s.Convrsions
         GET     s.MoreSWIs
+  [ :LNOT: CKernel
         GET     s.ExtraSWIs
+  ]
         GET     s.HeapSort
         GET     s.Arthur3
         GET     s.SWINaming
@@ -116,9 +124,11 @@
         $GetMessages
         GET     s.Middle
         GET     s.Super1
+  [ :LNOT: CKernel
         GET     s.MemInfo
         GET     s.CPUFeatures
         GET     s.MemMap2
+  ]
         GET     s.TaskControl
         ! 0, "Main kernel size = &" :CC: :STR: (.-KernelBase)
 StartOfVduDriver
@@ -142,7 +152,9 @@
         GET     s.vdu.VduGrafK
         GET     s.vdu.VduGrafL
         GET     s.vdu.VduGrafV
+  [ :LNOT: CKernel
         GET     s.vdu.VduGrafHAL
+  ]
         GET     s.vdu.VduWrch
         GET     s.vdu.Vdu23
         GET     s.vdu.VduPointer
@@ -170,11 +182,13 @@
 
         ! 0, "PMF section size = &" :CC: :STR: (EndOfPMF - StartOfPMF)
 
+  [ :LNOT: CKernel
 StartOfAMB
         GET     s.AMBControl.AMB
 EndOfAMB
 
         ! 0, "AMB section size = &" :CC: :STR: (EndOfAMB - StartOfAMB)
+  ]
 
         AREA    zzzzzz, DATA, READONLY
 EndOfKernelRO
diff -x TokHelpSrc -Naur orig/Kernel/s/HAL ckernel/Kernel/s/HAL
--- orig/Kernel/s/HAL	2023-01-14 12:42:56.000000000 +0100
+++ ckernel/Kernel/s/HAL	2024-11-02 09:18:47.020000000 +0100
@@ -12,6 +12,7 @@
 ; See the License for the specific language governing permissions and
 ; limitations under the License.
 ;
+
         GBLL    MinorL2PThack
 MinorL2PThack SETL {TRUE}
 
@@ -38,7 +39,6 @@
 
 ;        IMPORT  Init_ARMarch
 ;        IMPORT  ARM_Analyse
-
  [ MEMM_Type = "VMSAv6"
 mmuc_init_new
         ; MMUC initialisation flags for ARMv6/ARMv7
diff -x TokHelpSrc -Naur orig/Kernel/s/Kernel ckernel/Kernel/s/Kernel
--- orig/Kernel/s/Kernel	2023-11-20 21:28:29.000000000 +0100
+++ ckernel/Kernel/s/Kernel	2024-12-09 11:40:19.690000000 +0100
@@ -23,6 +23,9 @@
         MACRO
         DebugReg $reg, $str
     [ DebugHALTX
+  [ CKernel
+        ; LogNum $reg,10
+  |
         Push    lr
         Push "$reg"
      [ "$str" <> ""
@@ -33,17 +36,24 @@
         BL      DebugHALPrintReg
         Pull    lr
     ]
+  ]
         MEND
 
         MACRO
         DebugTX $str
     [ DebugHALTX
+  [ CKernel
+        ; Doesn't work, IDC why not!
+        ; Log "$str"
+        ; Log "\r"
+  |
         Push    lr
         BL      DebugHALPrint
         =       "$str", 13,10,00
         ALIGN
         Pull    lr
     ]
+  ]
         MEND
 
         MACRO
@@ -324,6 +334,8 @@
         ASSERT  (. - RISCOS_Header) = OSHdr_size
 
 RISCOS_Entries
+  [ CKernel
+  |
         DCD     RISCOS_InitARM   - RISCOS_Entries
         DCD     RISCOS_AddRAM    - RISCOS_Entries
         DCD     RISCOS_Start     - RISCOS_Entries
@@ -332,6 +344,7 @@
         DCD     RISCOS_LogToPhys - RISCOS_Entries
         DCD     RISCOS_IICOpV    - RISCOS_Entries
         DCD     RISCOS_MapInIO64 - RISCOS_Entries
+  ] ; CKernel
 RISCOS_Entries_End
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@@ -341,6 +354,7 @@
 ; keyboard can be handled during reset but the load is replaced with the
 ; standard one later on.
 
+  [ :LNOT: CKernel
 MOSROMVecs
         LDR     pc, MOSROMVecs+ProcVec_Branch0
         LDR     pc, MOSROMVecs+ProcVec_UndInst
@@ -366,7 +380,7 @@
         &       Initial_IRQ_Code
 
         ASSERT  (.-DefaultProcVecs) = ProcVec_End-ProcVec_Start
-
+  ]
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; These are preveneers which must be copied to 0 page locations so that the
 ; relevant handler can be branched to.  This is mainly for non-ARM600 platforms
@@ -383,6 +397,8 @@
 
         ASSERT  (.-DefaultPreVeneers) = ProcVecPreVeneersSize
 
+        EXPORT  KbuffsBaseAddress ; for CKernel
+
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; This is the trampoline in the system heap used to handle branch through 0.
 
@@ -421,6 +437,37 @@
 ; SWI return handler: checks callback
 ; no branches or interlocks in the common case: V clear, no callback
 
+  [ CKernel
+    ; The kernel has pushed the return address onto the stack and
+    ; put the flags into lr before calling the legacy code.
+    ; Kernel legacy SWIs jump to one of these three to return.
+SLVK_SetV
+    ORR lr, lr, #(1 << 28)
+SLVK_TestV
+    ORRVS lr, lr, #(1 << 28)
+SLVK
+    LDR pc, [sp], #4
+
+SWIReturnWithCallBackFlag
+    DCD &e7f001f0
+
+BadErrPtrReturn
+    DCD &e7f001f1
+    wfi
+SVCDespatcher
+    DCD &e7f001f2
+    wfi
+SVC_CallASWI
+    DCD &e7f001f3
+    wfi
+SVC
+    DCD &e7f001f4
+    wfi
+SWIRelocation
+    DCD &e7f001f5
+    wfi
+
+  |
 SVCDespatcher ROUT
 
 SWIRelocation * SVCDespatcher - ToRelative - SWIDespatch
@@ -534,9 +581,12 @@
         B       NotMainMOSSwi + SWIRelocation
 
  ASSERT {PC}-SVCDespatcher = SWIDespatch_Size
+  ] ; CKernel
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; The SWI table
+        ; Export for CKernel
+        EXPORT JTABLE
 
 JTABLE  & SWIWriteC
         & SWIWriteS
@@ -556,26 +606,26 @@
         & VecSwiDespatch        ; find
         & ReadLineSWI
 
-        & SCTRL
-        & SWI_GetEnv_Code
+        & UnexpectedSWI         ; SCTRL
+        & UnexpectedSWI         ; SWI_GetEnv_Code
         & SEXIT
-        & SSTENV
-        & SINTON
-        & SINTOFF
+        & UnexpectedSWI         ; SSTENV
+        & UnexpectedSWI         ; SINTON
+        & UnexpectedSWI         ; SINTOFF
         & SCALLB
-        & SENTERSWI
-        & SBRKPT
+        & UnexpectedSWI         ; SENTERSWI
+        & UnexpectedSWI         ; SBRKPT
         & SBRKCT
-        & SUNUSED
-        & SSETMEMC
-        & SSETCALL
+        & UnexpectedSWI         ; SUNUSED
+        & UnexpectedSWI                 ; SSETMEMC
+        & UnexpectedSWI         ; SSETCALL
         & VecMouse
         & HeapEntry
         & ModuleHandler
         & ClaimVector_SWICode
         & ReleaseVector_SWICode
         & ReadUnsigned_Routine
-        & GenEvent
+        & UnexpectedSWI                 ; GenEvent
         & ReadVarValue
         & SetVarValue
         & GSINIT
@@ -583,7 +633,7 @@
         & GSTRANS
         & BinaryToDecimal_Code
         & FSControlSWI
-        & ChangeDynamicSWI
+        & UnexpectedSWI                 ; ChangeDynamicSWI
         & GenErrorSWI
         & ReadEscapeSWI
         & ReadExpression
@@ -616,15 +666,15 @@
         & WriteEnv_SWICode
         & RdArgs_SWICode
         & ReadRAMFSLimits_Code
-        & DeviceVector_Claim
-        & DeviceVector_Release
+        & UnexpectedSWI                 ; DeviceVector_Claim
+        & UnexpectedSWI                 ; DeviceVector_Release
         & Application_Delink
         & Application_Relink
         & HeapSortRoutine
         & TerminateAndSodOff
-        & ReadMemMapInfo_Code
-        & ReadMemMapEntries_Code
-        & SetMemMapEntries_Code
+        & UnexpectedSWI                 ; ReadMemMapInfo_Code
+        & UnexpectedSWI                 ; ReadMemMapEntries_Code
+        & UnexpectedSWI                 ; SetMemMapEntries_Code
         & AddCallBack_Code
         & ReadDefaultHandler
         & SWISetECFOrigin
@@ -633,27 +683,27 @@
         & Confirm_Code
         & SWIChangedBox
         & CRC_Code
-        & ReadDynamicArea
+        & UnexpectedSWI                 ; ReadDynamicArea
         & SWIPrintChar
         & ChangeRedirection
         & RemoveCallBack
-        & FindMemMapEntries_Code
+        & UnexpectedSWI                 ; FindMemMapEntries_Code
         & SWISetColour
         & NoSuchSWI                     ; Added these to get round OS_ClaimSWI and
         & NoSuchSWI                     ; OS_ReleaseSWI (should not have been allocated here).
         & PointerSWI
         & ScreenModeSWI
-        & DynamicAreaSWI
+        & UnexpectedSWI                 ; DynamicAreaSWI
         & AbortTrapSWI
-        & MemorySWI
-        & ClaimProcVecSWI
+        & UnexpectedSWI                 ; MemorySWI
+        & UnexpectedSWI                 ; ClaimProcVecSWI
         & PerformReset
-        & MMUControlSWI
+        & NoSuchSWI                     ; MMUControlSWI
         & ResyncTimeSWI
         & PlatFeatSWI
-        & SyncCodeAreasSWI
+        & UnexpectedSWI                 ; SyncCodeAreasSWI
         & CallASWI
-        & AMBControlSWI
+        & UnexpectedSWI ; AMBControlSWI
         & CallASWIR12
 ; The following SWIs are not available in this kernel.
         & NoSuchSWI     ; SpecialControl
@@ -665,9 +715,9 @@
         & NoSuchSWI
         & TaskControlSWI
         & NoSuchSWI
-        & HardwareSWI
+        & UnexpectedSWI                 ; HardwareSWI
         & IICOpSWI
-        & SLEAVESWI
+        & UnexpectedSWI         ; SLEAVESWI
         & ReadLine32SWI
         & XOS_SubstituteArgs32_code
         & HeapSortRoutine32
@@ -682,7 +732,11 @@
 ; The fudge branch to exit a dirty SWI handler
 
 DirtyBranch
+  [ CKernel
+        BKPT    &ffdd
+  |
         B       SLVK + DirtyBranch - ToRelative - BranchToSWIExit
+  ] ; CKernel
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
@@ -1066,6 +1120,10 @@
 ; .............................................................................
 ; define module SWI node format
 
+  [ CKernel
+ExtensionSWI ROUT
+        BKPT    &ffdf
+  |
 ModSWINode_CallAddress * 0
 ModSWINode_MListNode   * 4
 ModSWINode_Link        * 8
@@ -1149,6 +1207,7 @@
         BFI     lr, r10, #24, #8        ; Can mangle any/all of punter flags
       ]
         B       SLVK
+  ] ; CKernel
 
 ; ....................... default owner of UKSWIV .............................
 ; Call UKSWI handler
@@ -1164,6 +1223,9 @@
 
 ; ........................ default UKSWI handler ..............................
 
+UnexpectedSWI ROUT
+        BKPT    &ffd8
+
 NoSuchSWI ROUT
 
         Push    lr
@@ -1497,6 +1559,9 @@
 ;          35 -> read routine to clear the exclusive monitor lock
 
 PlatFeatSWI ROUT
+  [ CKernel
+        BKPT    &ffde
+  |
         Push    lr
         CMP     r0, #OSPlatformFeatures_ReadProcessorVectors ;Is it a known reason code?
         BEQ     %FT30
@@ -1583,6 +1648,7 @@
         B       SLVK_SetV
 
         MakeErrorBlock BadPlatReas
+  ]
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; SWI OS_GenerateError
@@ -1723,7 +1789,53 @@
       ]
         B       SLVK_SetV
                 
+  [ CKernel ; Stolen from NewIRQs
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+; Subroutine call version
+
+; In    r0 = event type
+;       r1,r2 parameters
+
+; Out   C=0 => event was enabled, or was >= 32 anyway
+;       C=1 => event was disabled, so vector not called
+
+OSEVEN ROUT
+
+        Push    lr
+
+        CMP     r0, #31                 ; Events >= 32 are ALWAYS raised. SKS
+                                        ; flags are HI if so, ie. NE
+      [ ZeroPage = 0
+        LDRLSB  r14, [r0, #OsbyteVars + :INDEX: EventSemaphores]
+      |
+        LDRLS   r14, =ZeroPage+OsbyteVars+:INDEX:EventSemaphores
+        LDRLSB  r14, [r0, r14]
+      ]
+                                        ; get semaphore for this event 0..31
+        CMPLS   r14, #0                 ; non-zero => enabled
+        Pull    pc, EQ                  ; if disabled, exit with C=1
+
+        Push    "r0-r3, r10-r12" ; r3 excessive ???
+        MOV     r10, #EventV            ; call event vector
+        BL      CallVector
+        CLC                             ; indicate event enabled
+        Pull    "r0-r3, r10-r12, pc"
+
+  ]
+; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
+  [ CKernel
+        EXPORT  RISCOS_LogToPhys
+RISCOS_LogToPhys ROUT
+        BKPT    &ffb0
+
+        EXPORT  MemoryAccessPrivileges
+MemoryAccessPrivileges ROUT
+        BKPT    &ffb1
+
+        EXPORT  VduInit
+        EXPORT  despatchConvert
+  ]
 
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/MemInfo ckernel/Kernel/s/MemInfo
--- orig/Kernel/s/MemInfo	2021-08-07 13:43:01.000000000 +0200
+++ ckernel/Kernel/s/MemInfo	2024-11-02 09:53:44.430000000 +0100
@@ -762,6 +762,8 @@
 MemoryAmounts   ROUT
         Entry   "r3"
 
+  [ CKernel
+  |
         BICS    lr, r0, #&FF            ; Get type of memory required (leave bits 12-31, non-zero => error).
         CMP     lr, #6:SHL:8
         ADDCC   pc, pc, lr, LSR #8-2
@@ -825,6 +827,7 @@
         EXIT
 99
         PullEnv
+  ]
         ; Fall through...
 MemoryBadParameters
         ADRL    r0, ErrorBlock_BadParameters ; n.b. MemReturn handles internationalisation
@@ -2028,6 +2031,8 @@
 ;       silently fail, with a result of r1 = -1
 ;
 ChangeCompatibility ROUT
+  [ CKernel
+  |
         CMP     r1, #-1
         CMPNE   r1, #1
         CMPLS   r0, #255
@@ -2110,6 +2115,7 @@
         DCD     0 ; Fill the rest with zero (typically, most of ZeroPage is zero)
 30
  ]
+  ]
         LTORG
 
 ;----------------------------------------------------------------------------------------
@@ -2236,6 +2242,8 @@
 CMA_DecodeAP           * 1<<30 ; Used with CheckL2PT to indicate AP flags should be decoded from L2PT
 
 CheckMemoryAccess ROUT
+  [ CKernel
+  |
         Entry   "r0,r2-r10"
         CMP     r0, #24
         BNE     %FT99
@@ -2747,4 +2755,6 @@
 
         LTORG
 
+  ] ; CKernel
+
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/Middle ckernel/Kernel/s/Middle
--- orig/Kernel/s/Middle	2023-01-30 22:03:32.000000000 +0100
+++ ckernel/Kernel/s/Middle	2024-11-02 17:44:21.330000000 +0100
@@ -155,6 +155,7 @@
         SETV
         B       EndReadLine
 
+  [ :LNOT: CKernel
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; SWI OS_Control (deprecated): set handlers
 
@@ -181,12 +182,6 @@
         ExitSWIHandler
 
 
-CallCESWI
-        Push    lr
-        MOV     r2, #0                  ; readonly
-        SWI     XOS_ChangeEnvironment
-        Pull    pc
-
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; SWI OS_SetEnv (deprecated): Environment setting
 
@@ -229,7 +224,7 @@
         LDRHS   R2, =DynArea_PMP_BigByteCount ; more RAM than any Brazil could hope for
         MOV     R3, #0                  ; never any Brazil-type buffering
                                         ; m2 tools will complain if there is!
-        Pull    "R0, R1, lr"
+        Pull    "R0, R1, R2, lr"
         ExitSWIHandler
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@@ -337,6 +332,13 @@
         ADD     sp, sp, #4              ; Skip saved R11
         B       back_to_user_irqs_already_off
                                         ; Do NOT exit via normal mechanism
+  ] ; CKernel
+
+CallCESWI
+        Push    lr
+        MOV     r2, #0                  ; readonly
+        SWI     XOS_ChangeEnvironment
+        Pull    pc
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; SWI read mouse information
@@ -1265,6 +1267,9 @@
 ; ReadSysInfo(0) - return configured screensize in r0
 
 00
+  [ CKernel
+        BKPT    &ffd6
+  |
         Push    "r1, r2, lr"
         MOV     r0, #ReadCMOS
         MOV     r1, #ScreenSizeCMOS
@@ -1275,6 +1280,7 @@
         MUL     r0, r10, r0
         BL      MassageScreenSize       ; adjust for min and max or default values
         Pull    "r1, r2, lr"
+  ] ; CKernel
         ExitSWIHandler
 
 ; ReadSysInfo(1) - returns configured mode/wimpmode in r0
@@ -1564,8 +1570,13 @@
     ; 22 = FastTickerV counts per second
     ; 23 = Vector claimants table
     DCD  JTABLE-SWIRelocation                         ;18 - relocated base of OS SWI despatch table
+  [ CKernel
+    DCD  &ffa00000      ;19 - relocated base of IRQ device head nodes
+    DCD  &ffa00000      ;20 - relocated end of IRQ device head nodes. NOTE: Gets fixed up when read
+  |
     DCD  DefaultIRQ1V+(Devices-DefaultIRQ1Vcode)      ;19 - relocated base of IRQ device head nodes
     DCD  DefaultIRQ1V+(Devices-DefaultIRQ1Vcode)      ;20 - relocated end of IRQ device head nodes. NOTE: Gets fixed up when read
+  ] ; CKernel
     DCD  IRQSTK                                       ;21 - top of the IRQ stack
     DCD  SoundWorkSpace                               ;22 - workspace (8K) and buffers (2*4K)
     DCD  ZeroPage+IRQsema                             ;23 - the address of the IRQ semaphore
@@ -1578,8 +1589,13 @@
     %    (256-(.-osri6_table))
     ; Use 64+ for a repeat of the danger zone, and our new allocations
     DCD  JTABLE-SWIRelocation                         ;64 - relocated base of OS SWI despatch table
+  [ CKernel
+    DCD  &ffa00000      ;65 - relocated base of IRQ device head nodes
+    DCD  &ffa00000      ;66 - relocated end of IRQ device head nodes. NOTE: Gets fixed up when read
+  |
     DCD  DefaultIRQ1V+(Devices-DefaultIRQ1Vcode)      ;65 - relocated base of IRQ device head nodes
     DCD  DefaultIRQ1V+(Devices-DefaultIRQ1Vcode)      ;66 - relocated end of IRQ device head nodes. NOTE: Gets fixed up when read
+  ]
     DCD  IRQSTK                                       ;67 - top of the IRQ stack
     DCD  SoundWorkSpace                               ;68 - workspace (8K) and buffers (2*4K)
     DCD  ZeroPage+IRQsema                             ;69 - the address of the IRQ semaphore
diff -x TokHelpSrc -Naur orig/Kernel/s/ModHand ckernel/Kernel/s/ModHand
--- orig/Kernel/s/ModHand	2023-01-14 12:42:56.000000000 +0100
+++ ckernel/Kernel/s/ModHand	2024-11-02 10:04:26.710000000 +0100
@@ -1933,6 +1933,9 @@
 
 ;*************************************************************
 CallInit         ROUT
+  [ CKernel
+        BKPT    &ffdc
+  |
 ;    take R9  -> module node
 ;         R12 -> incarnation node
 ;         R10 -> envstring
@@ -2061,6 +2064,7 @@
         BL      FreeSWIEntry
         STR     R0, [stack]
         Pull   "R0-R6, R11, R12, PC"           ; V set return
+  ] ; CKernel
 
 ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; Enter with module pointer in R1
@@ -2172,6 +2176,9 @@
 ; Takes R9 pointer to module node; frees any module SWI hashtab node
 
 FreeSWIEntry ROUT
+  [ CKernel
+        BKPT    &ffdb
+  |
          Push   "R0-R5, R12, lr"
          MRS     R5, CPSR
          BL      CheckForSWIEntries
@@ -2211,6 +2218,8 @@
          MSR     CPSR_f, R5
          Pull   "R0-R5, R12, PC"
 
+  ] ; CKernel
+
 ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
   [ Oscli_HashedCommands
diff -x TokHelpSrc -Naur orig/Kernel/s/MsgCode ckernel/Kernel/s/MsgCode
--- orig/Kernel/s/MsgCode	2021-07-28 15:36:07.000000000 +0200
+++ ckernel/Kernel/s/MsgCode	2024-11-02 13:03:31.800000000 +0100
@@ -232,6 +232,10 @@
         &       ErrorBlock_BadNumb
 EndCommonErrorAddresses
 
+  [ CKernel ; From s.ChangeDyn
+        MakeErrorBlock ChDynamNotAllMoved
+  ]
+
         GBLA    ECEACount
 ECEACount SETA  (EndCommonErrorAddresses-CommonErrorAddresses)/4
         ASSERT  (EndCommonErrorAddresses <> CommonErrorAddresses)
diff -x TokHelpSrc -Naur orig/Kernel/s/NewIRQs ckernel/Kernel/s/NewIRQs
--- orig/Kernel/s/NewIRQs	2020-03-21 15:05:20.000000000 +0100
+++ ckernel/Kernel/s/NewIRQs	2024-12-09 12:10:39.190000000 +0100
@@ -29,6 +29,9 @@
 
         ALIGN 32
 
+  [ CKernel
+        ; Only TickOne
+  |
 Initial_IRQ_Code ROUT
         SUB     lr, lr, #4
         Push    "r0, lr"
@@ -555,7 +558,7 @@
       ]
 
         Pull    pc                      ; claim EventV
-
+  ] ; CKernel
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; Process timer zero IRQ device (100Hz clock)
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@@ -564,6 +567,9 @@
 
 TickOne ROUT
 
+  [ CKernel
+        EXPORT  TickOne
+  |
         ; Don't push r14 - we're using new interface, and claim the vector
         Push    "r0,r9,r12"
         AddressHAL
@@ -576,7 +582,7 @@
         Pull    "r0" ; get device number back
         CallHAL HAL_IRQClear
         Pull    "r9,r12"
-
+  ]
         LDR     R1, =ZeroPage
         LDR     R0, [R1, #MetroGnome]
         ADD     R0, R0, #1
@@ -641,6 +647,9 @@
 
         Pull    "R10,PC"
 
+  [ CKernel
+        ; Only TickOne
+  |
 ; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; Process VSync IRQ device
 ; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@@ -705,6 +714,8 @@
         BL      DoSecondFlash
         Pull    "R4, PC"
 
+  ] ; CKernel
+
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/NewReset ckernel/Kernel/s/NewReset
--- orig/Kernel/s/NewReset	2023-10-14 12:40:22.000000000 +0200
+++ ckernel/Kernel/s/NewReset	2024-11-03 09:11:44.940000000 +0100
@@ -19,6 +19,8 @@
 PowerOnReset    * 1
 ControlReset    * 2
 
+  [ CKernel
+  |
 ; CMOS RAM resetting stuff:
 CMOSLimit       * &F0
 
@@ -902,11 +904,6 @@
         =       &FF
         ALIGN 32
 
-      [ International
-MessageFileName DCB     "Resources:$.Resources.Kernel.Messages",0
-        ALIGN
-      ]
-
 70
 
 ; Deal with SHIFT pressed/SHIFT-BREAK configured:
@@ -996,5 +993,5 @@
 
 str_booterror   DCB     "Boot$$Error",0
                 ALIGN
-
+  ] ; CKernel
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/PMF/i2cutils ckernel/Kernel/s/PMF/i2cutils
--- orig/Kernel/s/PMF/i2cutils	2017-09-09 12:15:59.000000000 +0200
+++ ckernel/Kernel/s/PMF/i2cutils	2024-11-03 15:08:00.710000000 +0100
@@ -1607,6 +1607,9 @@
 ; out:  R2 = value, or -1 if the value is unknown/untouched
 ;
 NVMemory_ResetValue ROUT
+  [ CKernel
+        BKPT    &ffa1
+  |
         Entry   "R3"
         MOV     R2, #-1         ; assume outside our remit
         TEQ     R1, #NetStnCMOS
@@ -1656,6 +1659,7 @@
                      ; ^^^       interpolate at low rates, 16 bit DAC, fully programmable rates
                      ;    ^^^^^  tbs chars valid, escape with GSTrans
         EXIT
+  ]
 
 ; -----------------------------------------------------------------------------
 ; OS_NVMemory 7 - set station
diff -x TokHelpSrc -Naur orig/Kernel/s/PMF/key ckernel/Kernel/s/PMF/key
--- orig/Kernel/s/PMF/key	2021-04-28 15:27:07.000000000 +0200
+++ ckernel/Kernel/s/PMF/key	2024-11-03 15:10:27.820000000 +0100
@@ -728,7 +728,9 @@
 ; passed in R0 the power will be turned off assuming the hardware supports it
 
 PerformReset
-
+  [ CKernel
+        BKPT    &ffa2
+  |
         Push    R0
         WritePSRc F_bit+I_bit+SVC_mode, R14
 
@@ -756,6 +758,7 @@
         CallHAL HAL_Reset
 15
         B       CONT_Break                      ; If we can't turn the power off,we may end up back here anyway
+  ] ; CKernel
 
 EscList
         =       1, &1B
diff -x TokHelpSrc -Naur orig/Kernel/s/PMF/osbyte ckernel/Kernel/s/PMF/osbyte
--- orig/Kernel/s/PMF/osbyte	2020-06-22 10:14:23.000000000 +0200
+++ ckernel/Kernel/s/PMF/osbyte	2024-11-03 15:06:21.020000000 +0100
@@ -471,8 +471,12 @@
 Osbyte0C
         TEQ     R1, #0
         BNE     V2BBC
+  [ CKernel
+        BKPT &ffa0
+  |
         CLRPSR  I_bit, R0       ; this may take some time
         BL      ReadKeyDefaults
+  ]
         MyOsbyte
 
 ; *****************************************************************************
diff -x TokHelpSrc -Naur orig/Kernel/s/PMF/osinit ckernel/Kernel/s/PMF/osinit
--- orig/Kernel/s/PMF/osinit	2020-06-22 10:14:23.000000000 +0200
+++ ckernel/Kernel/s/PMF/osinit	2024-11-03 15:05:18.870000000 +0100
@@ -98,6 +98,8 @@
 
         BL      ReadUniqueID
 
+  [ CKernel
+  |
         Push    "r9,r12"
         AddressHAL
         MOV     R0, #0
@@ -107,7 +109,7 @@
         MOV     R0, R4
         CallHAL HAL_IRQEnable           ; enable timer 0 IRQ
         Pull    "r9,r12"
-
+  ]
 ; The RTC driver is later on in the module chain, or missing, for now default the
 ; system time to UNIX epoch + 1 day (so time() doesn't return -1)
 secs0070 *      (86400*(365*70+18))     ; from time() in risc_oslib.c.armsys
@@ -122,6 +124,8 @@
 
         LTORG
 
+  [ CKernel
+  |
 ; *****************************************************************************
 ;
 ;       InitHostedDAs - Set up the dynamic areas that we kindly host on
@@ -193,6 +197,7 @@
         BL      DynArea_Create          ; ignore any error, we're stuffed if we get one!
 
         Pull    "r0-r12, pc"
+  ] ; CKernel
 
 ; *****************************************************************************
 ;
@@ -249,7 +254,8 @@
 ;
 ;       ReadCMOSDefaults - Read CMOS values for any reset
 ;       On entry WsPtr -> BYTEWS
-
+  [ CKernel
+  |
 ReadCMOSDefaults
         Push    R14
 
@@ -302,7 +308,7 @@
         STRB    R0, KeyRepRate
 
         Pull    PC
-
+  ]
 ; *****************************************************************************
 ;
 ;       PostInit - Called by Sam after modules have been initialised
@@ -501,8 +507,6 @@
 
         LTORG
 
-oldirqowner & IRQ
-
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ;
 ;       TranslateMonitorLeadType - Determine monitor type and default mode + sync from monitor lead type
@@ -584,6 +588,10 @@
 ;
 
 ReadUniqueID
+  [ CKernel
+        BKPT    &ffc0
+        MOV     pc, lr
+  |
         Entry   "r0-r3,r9,r12"
         AddressHAL
         ; Check for extended ID first
@@ -645,6 +653,7 @@
         STR     r0, [lr, #RawMachineID+0]       ; indicate no ID by putting zero here
         STR     r0, [lr, #RawMachineID+4]
       ]
+  ]
         EXIT
 
 CheckCRC ROUT
diff -x TokHelpSrc -Naur orig/Kernel/s/SWINaming ckernel/Kernel/s/SWINaming
--- orig/Kernel/s/SWINaming	2016-07-24 12:50:44.000000000 +0200
+++ ckernel/Kernel/s/SWINaming	2024-11-02 10:26:44.440000000 +0100
@@ -34,6 +34,9 @@
 ;
 
 SWINumberToString_Code    ROUT
+  [ CKernel
+        BKPT    &ffd9
+  |
         WritePSRc SVC_mode, r12         ; interrupts on!
         MOV     r12, lr                 ; keep here so subroutines can update flags
         Push    "r3, r9"
@@ -473,6 +476,7 @@
 02
         SETV
         MOV     pc, lr
+  ] ; CKernel
 
 ;***********************************************************************
 
@@ -480,6 +484,9 @@
 ; return R0 as SWI number
 
 SWINumberFromString_Code Entry "r1,r2"
+  [ CKernel
+        BKPT    &ffd9
+  |
 
         WritePSRc SVC_mode, r10                 ; enable interrupts
         LDRB    R10, [R1]
@@ -669,5 +676,6 @@
         BIC     r0, r0, #Module_SWIChunkSize -1
         ADDVC   r0, r0, r2
         Pull    "r1, r2, r8,r9, r12, pc"
+  ] ; CKernel
 
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/TaskControl ckernel/Kernel/s/TaskControl
--- orig/Kernel/s/TaskControl	2023-01-14 21:49:11.000000000 +0100
+++ ckernel/Kernel/s/TaskControl	2024-11-09 09:23:48.930000000 +0100
@@ -48,6 +48,8 @@
 ;  The routine will also perform some other important recovery operations, such
 ;  as resetting the IRQsema and CDASemaphore internal kernel variables.
 TaskControl_ResetStacks
+  [ CKernel
+  |
         ; Reset some important variables
         LDR     r0, =ZeroPage
         MOV     r1, #0
@@ -70,6 +72,7 @@
         LDR     r13, =UNDSTK
         ; Return
         MSR     CPSR_c, r0
+  ] ; CKernel
         MOV     pc, lr
 
         LTORG
diff -x TokHelpSrc -Naur orig/Kernel/s/Utility ckernel/Kernel/s/Utility
--- orig/Kernel/s/Utility	2021-07-28 15:36:06.000000000 +0200
+++ ckernel/Kernel/s/Utility	2024-11-03 19:19:46.170000000 +0100
@@ -20,6 +20,10 @@
 SysModules_Info ROUT     ; start of ROM modules chain
         &       (EndOfKernelRW-RWBase)+EndOfKernelRO-SysModules_Info
 
+  [ CKernel
+        EXPORT UtilityMod
+  ]
+
 UtilityMod
 Module_BaseAddr
         &       StartSuper-UtilityMod
@@ -29,8 +33,13 @@
         &       UtilModTitle-UtilityMod
         &       UtilHelpStr-UtilityMod
         &       UtilHelpTab-UtilityMod
+  [ CKernel ; No IMB SWIs (Who uses that, anyway?)
+        &       0
+        &       0
+  |
         &       &F00000
         &       Util_SWI-UtilityMod
+  ]
         &       Util_SWITab-UtilityMod
         &       0
  [ International_Help <> 0
@@ -45,6 +54,11 @@
         =       "IMB",0
         =       "IMBRange",0
         =       0
+
+      [ International
+MessageFileName DCB     "Resources:$.Resources.Kernel.Messages",0
+      ]
+
         ALIGN
 
   [ ChocolateService
@@ -1042,6 +1056,7 @@
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
+  [ :LNOT: CKernel
 ; Deal with UtilityModule SWIs.
 ;
 ; The UtilityModule provides "OS-independent" SWIs. At present these are:
@@ -1074,6 +1089,7 @@
       ]
 
         MakeErrorBlock ModuleBadSWI
+  ]
 
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ; ChangeDynamicArea - moved here from the Task Manager as embedded devices
diff -x TokHelpSrc -Naur orig/Kernel/s/vdu/vdudriver ckernel/Kernel/s/vdu/vdudriver
--- orig/Kernel/s/vdu/vdudriver	2021-04-28 15:27:05.000000000 +0200
+++ ckernel/Kernel/s/vdu/vdudriver	2024-11-03 20:41:54.480000000 +0100
@@ -148,11 +148,11 @@
         MOV     R0, #maxmode
         STR     R0, [WsPtr, #MaxMode]   ; constant now
 
-
+  [ :LNOT: CKernel
         LDROSB  R0, LastBREAK           ; is it a hard reset ?
         TEQ     R0, #SoftReset
         BEQ     %FT10                   ; [no, don't reset font]
-
+  ]
 
 ; allocate buffer for Tim's whizzy text expansion.  This now lives
 ; in the system heap, unless the claim request fails.  If the request
@@ -282,7 +282,10 @@
         LDR     r0, =ZeroPage+VduDriverWorkSpace+CurrentGraphicsVDriver
         LDR     r0, [r0]
         CMP     r0, #GraphicsVInvalid
+  [ CKernel
+  |
         BEQ     VduGrafHAL_Init         ; tail-call since InitialiseMode will get called again when the HAL registers itself
+  ]
 
         Entry   "r1-r12"
 
@@ -1051,7 +1054,6 @@
         Pull    "R0-R4, PC"
 
         MakeErrorBlock BadMODE
-
         LTORG
 
 ; The following symbols, apart from being used in NColourTable,
@@ -2565,7 +2567,10 @@
 90
         EXIT
 
-
+  [ CKernel
+UpdateFalseVsync ; from NewIRQs
+        MOV     pc, lr
+  ]
         LTORG
 
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/vdu/vdufontl1 ckernel/Kernel/s/vdu/vdufontl1
--- orig/Kernel/s/vdu/vdufontl1	1999-09-20 16:59:40.000000000 +0200
+++ ckernel/Kernel/s/vdu/vdufontl1	2024-11-02 09:16:15.150000000 +0100
@@ -16,6 +16,8 @@
 
 ; KJB 990917 - definitions updated from International 1.54
 
+        EXPORT  HardFont ; Export for CKernel
+
 HardFont
         = &00,&00,&00,&00,&00,&00,&00,&00 ;ISO  "space"
         = &18,&18,&18,&18,&18,&00,&18,&00 ;ISO  "exclamation mark"
diff -x TokHelpSrc -Naur orig/Kernel/s/vdu/vdugrafhal ckernel/Kernel/s/vdu/vdugrafhal
--- orig/Kernel/s/vdu/vdugrafhal	2015-07-10 22:16:43.000000000 +0200
+++ ckernel/Kernel/s/vdu/vdugrafhal	2024-11-03 09:07:17.730000000 +0100
@@ -194,7 +194,7 @@
         MOV     r4, #0
         Pull    "r1-r3, r9, pc"
 
-
+  [ :LNOT: CKernel
 VduGrafHAL_Init ROUT
         Entry   "r0-r12"
         AddressHAL
@@ -262,5 +262,6 @@
 VduGrafHAL_Name
         =       "HAL", 0
         ALIGN
+  ] ; CKernel
 
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/vdu/vdugrafv ckernel/Kernel/s/vdu/vdugrafv
--- orig/Kernel/s/vdu/vdugrafv	2016-06-30 22:29:06.000000000 +0200
+++ ckernel/Kernel/s/vdu/vdugrafv	2024-11-02 21:21:58.050000000 +0100
@@ -66,4 +66,8 @@
         TEQEQ   R11, #0                         ; Must not be redirected
         MOV     PC, R14
 
+  [ CKernel
+VsyncIRQ_ExtEntry ROUT
+        MOV     PC, R14                         ; Really in NewIRQs
+  ]
         END
diff -x TokHelpSrc -Naur orig/Kernel/s/VMSAv6 ckernel/Kernel/s/VMSAv6
--- orig/Kernel/s/VMSAv6	2021-04-28 15:27:07.000000000 +0200
+++ ckernel/Kernel/s/VMSAv6	2024-11-02 13:00:42.450000000 +0100
@@ -25,12 +25,6 @@
 
         KEEP
 
-        =       0                       ; So PageShifts-1 is word aligned
-PageShifts
-        =       12, 13, 0, 14           ; 1 2 3 4
-        =       0,  0,  0, 15           ; 5 6 7 8
-        ALIGN
-
 ; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 ;
 ; "VMSAv6"-specific OS_MMUControl code
