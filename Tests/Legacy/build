#! /bin/bash -

SUBSYSTEMS=RawMemory:OSTask:Legacy:Modules
MODULES=HAL:System/Pi/QA7:System/Pi/GPUMailbox:System/Pi/BCM2835Display:System/Pi/LEDBlink:System/LogToUART:System/Pi/Legacy/BCM2835GrV

#:System/Pi/PL011UART

echo Modules: ${MODULES//:/ }

# Be careful not to include the same module twice!
# At least until it will be safely coped with.
INITIAL_MODULES='QA7\0'

INITIAL_MODULES+='LogToUART\0'
INITIAL_MODULES+='LEDBlink\0'
INITIAL_MODULES+='GPUMailbox\0'
INITIAL_MODULES+='BCM2835Display\0'
INITIAL_MODULES+='BCM2835GrV\0'

INITIAL_MODULES+='UtilityModule\0'
INITIAL_MODULES+='FileSwitch\0'
INITIAL_MODULES+='ResourceFS\0'
INITIAL_MODULES+='TerritoryManager\0'
INITIAL_MODULES+='Messages\0'
INITIAL_MODULES+='MessageTrans\0'
INITIAL_MODULES+='UK\0'

INITIAL_MODULES+='WindowManager\0'
INITIAL_MODULES+='TaskManager\0'
INITIAL_MODULES+='Desktop\0'

INITIAL_MODULES+='SharedCLibrary\0' # Not 'CLib\0'
INITIAL_MODULES+='BASIC\0'
INITIAL_MODULES+='BASIC64\0'
INITIAL_MODULES+='BASICVFP\0'
INITIAL_MODULES+='BlendTable\0'
INITIAL_MODULES+='BufferManager\0'
INITIAL_MODULES+='ColourTrans\0'
INITIAL_MODULES+='DeviceFS\0'
INITIAL_MODULES+='ScreenModes\0'
#INITIAL_MODULES+='Portable\0'
INITIAL_MODULES+='DisplayManager\0'
INITIAL_MODULES+='DragASprite\0'
INITIAL_MODULES+='DragAnObject\0'
INITIAL_MODULES+='Draw\0'
INITIAL_MODULES+='FileCore\0'
INITIAL_MODULES+='Filer\0'
INITIAL_MODULES+='FilerSWIs\0'
INITIAL_MODULES+='FontManager\0'
#INITIAL_MODULES+='FPEmulator\0'
#INITIAL_MODULES+='VFPSupport\0'
INITIAL_MODULES+='Free\0'
INITIAL_MODULES+='International\0'
INITIAL_MODULES+='InverseTable\0'
INITIAL_MODULES+='NetFiler\0'
INITIAL_MODULES+='Obey\0'
INITIAL_MODULES+='Pinboard\0'
INITIAL_MODULES+='RAMFSFiler\0'
INITIAL_MODULES+='ResourceFiler\0'
INITIAL_MODULES+='ROMFonts\0'

#INITIAL_MODULES+='RTC\0'
INITIAL_MODULES+='ScreenBlanker\0'
#INITIAL_MODULES+='ScrSaver\0'
#INITIAL_MODULES+='Serial\0' fc037b10 HardwareCallHAL
#INITIAL_MODULES+='SerialDeviceSupport\0'
#INITIAL_MODULES+='ShellCLI\0' Prefetch abort
#INITIAL_MODULES+='SoundDMA\0'
#INITIAL_MODULES+='SoundControl\0'
#INITIAL_MODULES+='SoundChannels\0'
#INITIAL_MODULES+='SoundScheduler\0'

# SpriteExtend does a lot of checking for platform features etc.
# See how far we get without it.
#INITIAL_MODULES+='SpriteExtend\0'

INITIAL_MODULES+='SpriteUtils\0'
INITIAL_MODULES+='Squash\0'
INITIAL_MODULES+='BootFX\0'
INITIAL_MODULES+='SuperSample\0'
INITIAL_MODULES+='SystemDevices\0'

# TaskWindow fiddles with internal kernel variables that are no longer valid.
#INITIAL_MODULES+='TaskWindow\0'
INITIAL_MODULES+='WindowUtils\0'
INITIAL_MODULES+='FilterManager\0'
INITIAL_MODULES+='WaveSynth\0'
INITIAL_MODULES+='StringLib\0'
INITIAL_MODULES+='Percussion\0'
INITIAL_MODULES+='SharedSound\0'
INITIAL_MODULES+='Filer_Action\0'
INITIAL_MODULES+='DOSFS\0'
INITIAL_MODULES+='SDIODriver\0'
INITIAL_MODULES+='SDFS\0' # Returns variable not found...

INITIAL_MODULES+='SDFSFiler\0'
# Fun fact, SDCMOS tries to run code on the SVC stack. It's not alone.
# Search for mov pc, sp
# Only when there's an error in the initialisation callback
#INITIAL_MODULES+='SDCMOS\0'

# INITIAL_MODULES+='ColourPicker\0' # Init calls exit?
INITIAL_MODULES+='DrawFile\0'
INITIAL_MODULES+='BootCommands\0'
INITIAL_MODULES+='WindowScroll\0'
INITIAL_MODULES+='MbufManager\0'

# Skipping internet stuff for now
# INITIAL_MODULES+='Internet\0'
# INITIAL_MODULES+='Resolver\0'
# INITIAL_MODULES+='Net\0'
# INITIAL_MODULES+='BootNet\0'
# INITIAL_MODULES+='Freeway\0'
# INITIAL_MODULES+='ShareFS\0'
# INITIAL_MODULES+='MimeMap\0'
INITIAL_MODULES+='!Edit\0'
INITIAL_MODULES+='!Draw\0'
INITIAL_MODULES+='!Paint\0'
INITIAL_MODULES+='!Alarm\0'
INITIAL_MODULES+='!Chars\0'
INITIAL_MODULES+='!Help\0'
INITIAL_MODULES+='Toolbox\0'
INITIAL_MODULES+='Window\0'
INITIAL_MODULES+='ToolAction\0'
INITIAL_MODULES+='Menu\0'
INITIAL_MODULES+='Iconbar\0'
INITIAL_MODULES+='ColourDbox\0'
INITIAL_MODULES+='ColourMenu\0'
INITIAL_MODULES+='DCS\0'
INITIAL_MODULES+='FileInfo\0'
INITIAL_MODULES+='FontDbox\0'
INITIAL_MODULES+='FontMenu\0'
INITIAL_MODULES+='PrintDbox\0'
INITIAL_MODULES+='ProgInfo\0'
INITIAL_MODULES+='SaveAs\0'
INITIAL_MODULES+='Scale\0'
INITIAL_MODULES+='TextGadgets\0'
INITIAL_MODULES+='CDFSDriver\0'
INITIAL_MODULES+='CDFSSoftSCSI\0'
INITIAL_MODULES+='CDFS\0'
INITIAL_MODULES+='CDFSFiler\0'
INITIAL_MODULES+='UnSqueezeAIF\0'
INITIAL_MODULES+='GPIO\0'


DEFAULT_LANGUAGE=LEDBlink

echo Initial modules: ${INITIAL_MODULES//\\0/, }
echo Default language: $DEFAULT_LANGUAGE

rm -rf Generated
mkdir Generated

SYSTEM=$( dirname $0 )

echo Building system $SYSTEM with ${SUBSYSTEMS//:/ }

# Note trailing :
SOURCES="$SYSTEM:$SUBSYSTEMS:"

GCC=arm-none-eabi-gcc-9.2.1
OBJDUMP=arm-none-eabi-objdump
OBJCOPY=arm-none-eabi-objcopy

MMU=Processor/VMSAv6

CFLAGS="-I . -Wall -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static -march=armv8-a+nofp -O4 -I Processor -I $MMU -I $SYSTEM -I Utilities -I Devices"
CFLAGS="$CFLAGS -I ${SUBSYSTEMS//:/ -I }"
CFLAGS="$CFLAGS $*"
echo $CFLAGS

$GCC -c Processor/CortexA53/processor.c \
        $MMU/mmu.c \
        --no-toplevel-reorder \
        $CFLAGS &&
$OBJCOPY --rename-section .text=.init --rename-section .data=.init processor.o processor.boot &&
$OBJCOPY --rename-section .text=.init --rename-section .data=.init mmu.o mmu.boot || { echo Failed to build core routines >&2 ; exit 1; }

echo Sources: ${SOURCES//://*.c }

# legacy_zero_page must match ZeroPage in Sources/Kernel/hdr/KernelWS

# This script expects a complete ROM image in RISCOS.img and Kernel_gpa
# copied from RiscOS/Sources/Kernel/bin/Kernel_gpa or
# RiscOS/Install/ROOL/BCM2835/RISC_OS/Kernel_gpa
# Changing the amount of RAM reserved for the HAL involves many changes in
# the RISC OS source, and I can't work out what they all are!
# So, for now, the CKernel modules can come after the rom image.
#   RiscOS/Export/APCS-32/Hdr/Global/HALSize/?
#   RiscOS/BuildSys/Components/ROOL/BCM2835

# Position taken from RISCOS.log is the first word of the module, the
# length is in the previous word

function rom_module {
  sed -n  's/^\<'$1'\> *\(FC......\) *00.*$/0x\1/p' RISCOS.log
}

function rom_object {
  sed -n  's/^\<'$1'\> *\(........\)\.\.FC.*$/0x\1/p' Kernel_gpa
}

KERNEL_START=$( rom_module Kernel )
KERNEL_OFFSET=$( echo $KERNEL_START | sed -n 's/^0xFC0*//p' )

function symbol {
  echo -Wl,--defsym=$1=$( rom_object $1 ) 
}

FIRST=$( printf 0x%x $(( $( rom_object UtilityMod ) - 4 )) )

LEGACIES="-Wl,--defsym=LegacyModulesList=$FIRST"
LEGACIES+=" "$( symbol JTABLE )
LEGACIES+=" "$( symbol defaultvectab )

LEGACIES+=" "$( symbol VduInit )

LEGACIES+=" "$( symbol HardFont )

echo $LEGACIES
echo $KERNEL_START, $KERNEL_OFFSET

# Cleared after the first (HAL) module built
HALFLAGS="-DINITIAL_MODULES="\"$INITIAL_MODULES\"" -DDEFAULT_LANGUAGE=\"$DEFAULT_LANGUAGE\" " &&

(
echo // File generated by build script > Generated/rom_modules.h 
for i in ${MODULES//:/ }
do
  MODNAME=$( basename ${i} ) &&
  echo extern module_header ${MODNAME}_header\; >> Generated/rom_modules.h 
done &&
echo static rom_module const rom_modules[] = {  >> Generated/rom_modules.h  &&
for i in ${MODULES//:/ }
do
  Modules/build_for_rom Modules/$i $MODCFLAGS $HALFLAGS|| exit 1 &&
  HALFLAGS='' &&
  MODNAME=$( basename ${i} ) &&
  echo { \"$MODNAME\", \&${MODNAME}_header }, >> Generated/rom_modules.h 
done &&
echo '{ 0, 0 } };' >> Generated/rom_modules.h 
) || exit 1 &&

echo 'char const build_script[] = "Build script: '"$0"'";' >> Generated/rom_modules.h 
echo 'char const build_options[] = "Build options: '"$*"'";' >> Generated/rom_modules.h 
echo 'char const modcflags[] = "Build module flags: '"$MODCFLAGS"'";' >> Generated/rom_modules.h 

echo Modules built &&

echo SWI chunks: &&

for i in Generated/*,ffa 
do
  echo -ne $i\\t  &&
  od -t x4 -j 28 -N 4 -A none $i
done &&
echo &&

echo Duplicate SWI chunks \(not generally good, may be OK\): &&

for i in Generated/*,ffa 
do
  od -j 28 -N 4 -t x4 -A none $i 
done | sort | uniq -c | grep -v -e '00000000$' -e '\<1\>' && exit 2

### IMPORTANT
# The following dd, the location of .romimage in the linker parameters and
# the line "Kernel -at 0x..." in RiscOS/BuildSys/Components/ROOL/* must
# match up. This script takes its cue from the Kernel_gpa, so only the
# RiscOS/BuildSys/Components/ROOL/ file needs to be changed.
###

# RMA (shared_heap) starts at AplWorkMaxSize, 512MiB, but no obvious symbol
# to extract from build.

dd if=RISCOS.img of=/tmp/RISCOS.used bs=$(( 0x$KERNEL_OFFSET )) skip=1 &&
$OBJCOPY -I binary -O elf32-littlearm -B armv7 \
        --redefine-sym _binary__tmp_RISCOS_used_start=_romimage_start \
        --redefine-sym _binary__tmp_RISCOS_used_size=_romimage_size \
        --rename-section .data=.romimage \
        /tmp/RISCOS.used RISCOS.o &&

echo Running sanity check
strings RISCOS.img -t x | grep OSIm | grep $KERNEL_OFFSET || exit 1
echo Seems alright

# 16MiB boot RAM
# 256MiB minimum RAM
arm-none-eabi-gcc-9.2.1 \
        processor.boot mmu.boot \
        ${SOURCES//://*.c } \
        RISCOS.o \
        -o kernel7.elf \
        $CFLAGS \
        $LEGACIES \
        -I Generated Generated/*.o \
        romimage_end.c \
        -Wl,--defsym=legacy_svc_stack_top=0xfa208000 \
        -Wl,--defsym=legacy_zero_page=0xfff40000 \
        \
        -Wl,--defsym=top_of_boot_RAM=0x1000000 \
        -Wl,--defsym=top_of_minimum_RAM=0x10000000 \
        \
        -Wl,--defsym=OSTask_free_pool=0xff100000 \
        -Wl,--defsym=OSTaskSlot_free_pool=0xff200000 \
        \
        -Wl,--defsym=OSQueue_free_pool=0xfff90000 \
        -Wl,--defsym=OSPipe_free_pool=0xfffa0000 \
        \
        -Wl,--defsym=VMSAv6_Level2_Tables=0xff300000 \
        -Wl,--defsym=system_heap_base=0x30000000 \
        -Wl,--defsym=system_heap_top=0x30100000 \
        -Wl,--defsym=shared_heap_base=0x20000000 \
        -Wl,--defsym=shared_heap_top=0x20100000 \
        \
        -Wl,--defsym=log_pipe=0xfff00000 \
        -Wl,--defsym=log_pipe_top=0xfff02000 \
        -Wl,--defsym=app_memory_limit=0x20000000 \
        -Wl,--defsym=dynamic_areas_base=0x40000000 \
        -Wl,--defsym=dynamic_areas_top=0x50000000 \
        -Wl,--defsym=pipes_base=0x80000000 \
        -Wl,--defsym=pipes_top=0xc0000000 \
        \
        -Wl,--defsym=translation_table=0xfff80000 \
        -Wl,--defsym=global_translation_table=0xfff84000 \
        -Wl,--defsym=local_kernel_page_table=0xfff88000 \
        -Wl,--defsym=global_kernel_page_tables=0xfff89000 \
        -Wl,--defsym=workspace=0xfffd0000 \
        -Wl,--defsym=shared=0xfffe0000 \
        -Wl,--section-start=.init=0xfc000000 \
        -Wl,--section-start=.text=0xfc003000 \
        -Wl,--section-start=.romimage=$KERNEL_START \
        &&
arm-none-eabi-objcopy -R .ignoring -O binary kernel7.elf kernel7.img &&
echo Running sanity check 2 &&
strings kernel7.img -t x | grep OSIm | grep $KERNEL_OFFSET &&
echo Seems alright &&

echo Image built, disassembling &&
time arm-none-eabi-objdump -x --disassemble-all kernel7.elf > kernel7.dump
