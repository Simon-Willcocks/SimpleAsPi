#! /bin/bash -

# Parts of the kernel
SUBSYSTEMS=RawMemory:OSTask:SimpleHeap:NoLegacy:Modules
# Modules to include (HAL chooses which ones to load.)
#MODULES=HAL:System/Pi/QA7:System/Pi/LEDBlink:System/LogToUART
MODULES=HAL:System/Pi/QA7:System/Pi/LEDBlink

echo Modules: ${MODULES//:/ }

#INITIAL_MODULES='QA7\0LEDBlink\0LogToUART\0'
INITIAL_MODULES='QA7\0LEDBlink\0'
#DEFAULT_LANGUAGE=LogToUART
DEFAULT_LANGUAGE=LEDBlink

# This is not a foolproof test, but it should catch some foolishness
for i in ${INITIAL_MODULES/\\0/ } $DEFAULT_LANGUAGE ; do 
  echo Looking for $i
  echo ${MODULES//:/ } | grep $i
done || { echo $i not in build! ; exit 3 ; }

echo $INITIAL_MODULES
echo Default language: $DEFAULT_LANGUAGE

rm -rf Generated
mkdir Generated

SYSTEM=$( dirname $0 )

echo Building system $SYSTEM with ${SUBSYSTEMS//:/ }

# Note trailing :
SOURCES="$SYSTEM:$SUBSYSTEMS:"

GCC=arm-none-eabi-gcc-9.2.1
OBJDUMP=arm-none-eabi-objdump
OBJCOPY=arm-none-eabi-objcopy

MMU=Processor/VMSAv6

CFLAGS="-I . -Wall -nostartfiles -nostdlib -fno-zero-initialized-in-bss -static -march=armv8-a+nofp -O4 -I Processor -I $MMU -I $SYSTEM -I Utilities -I Devices"
CFLAGS="$CFLAGS -I ${SUBSYSTEMS//:/ -I }"
CFLAGS="$CFLAGS $*"
echo $CFLAGS

$GCC -c Processor/CortexA53/processor.c \
        $MMU/mmu.c \
        --no-toplevel-reorder \
        $CFLAGS &&
$OBJCOPY --rename-section .text=.init --rename-section .data=.init processor.o processor.boot &&
$OBJCOPY --rename-section .text=.init --rename-section .data=.init mmu.o mmu.boot || ( echo Failed >&2 ; exit 1 )

echo Sources: ${SOURCES//://*.c }

# Cleared after the first (HAL) module built
HALFLAGS="-DINITIAL_MODULES="\"$INITIAL_MODULES\"" -DDEFAULT_LANGUAGE=\"$DEFAULT_LANGUAGE\" " &&

(
echo // File generated by build script > Generated/rom_modules.h 
for i in ${MODULES//:/ }
do
  MODNAME=$( basename ${i} ) &&
  echo extern module_header ${MODNAME}_header\; >> Generated/rom_modules.h 
done &&
echo static rom_module const rom_modules[] = {  >> Generated/rom_modules.h  &&
for i in ${MODULES//:/ }
do
  Modules/build_for_rom Modules/$i $MODCFLAGS $HALFLAGS|| exit 1 &&
  HALFLAGS='' &&
  MODNAME=$( basename ${i} ) &&
  echo { \"$MODNAME\", \&${MODNAME}_header }, >> Generated/rom_modules.h 
done &&
echo '{ 0, 0 } };' >> Generated/rom_modules.h 
) || exit 1 &&

echo Modules built &&

echo SWI chunks: &&

for i in Generated/*,ffa 
do
  echo -ne $i\\t  &&
  od -t x4 -j 28 -N 4 -A none $i
done &&
echo &&

echo Duplicate SWI chunks \(not generally good, may be OK\): &&

for i in Generated/*,ffa 
do
  od -j 28 -N 4 -t x4 -A none $i 
done | sort | uniq -c | grep -v -e '00000000$' -e '\<1\>' && exit 2

# 16MiB boot RAM
# 256MiB minimum RAM
arm-none-eabi-gcc-9.2.1 \
        processor.boot mmu.boot \
        ${SOURCES//://*.c } \
        -o kernel7.elf \
        $CFLAGS \
        $LEGACIES \
        -I Generated Generated/*.o \
        romimage_end.c \
        -Wl,--defsym=legacy_svc_stack_top=0xff100000 \
        -Wl,--defsym=legacy_zero_page=0xfff40000 \
        \
        -Wl,--defsym=top_of_boot_RAM=0x1000000 \
        -Wl,--defsym=top_of_minimum_RAM=0x10000000 \
        \
        -Wl,--defsym=OSTask_free_pool=0xff100000 \
        -Wl,--defsym=OSTaskSlot_free_pool=0xff200000 \
        \
        -Wl,--defsym=OSQueue_free_pool=0xfff90000 \
        -Wl,--defsym=OSPipe_free_pool=0xfffa0000 \
        \
        -Wl,--defsym=VMSAv6_Level2_Tables=0xff300000 \
        -Wl,--defsym=system_heap_base=0x30000000 \
        -Wl,--defsym=system_heap_top=0x30100000 \
        -Wl,--defsym=shared_heap_base=0xff500000 \
        -Wl,--defsym=shared_heap_top=0xff600000 \
        \
        -Wl,--defsym=log_pipe=0xfff00000 \
        -Wl,--defsym=log_pipe_top=0xfff02000 \
        -Wl,--defsym=app_memory_limit=0x30000000 \
        -Wl,--defsym=pipes_base=0x80000000 \
        -Wl,--defsym=pipes_top=0xc0000000 \
        \
        -Wl,--defsym=translation_table=0xfff80000 \
        -Wl,--defsym=global_translation_table=0xfff84000 \
        -Wl,--defsym=local_kernel_page_table=0xfff88000 \
        -Wl,--defsym=global_kernel_page_tables=0xfff89000 \
        -Wl,--defsym=workspace=0xfffd0000 \
        -Wl,--defsym=shared=0xfffe0000 \
        -Wl,--section-start=.init=0xfc000000 \
        -Wl,--section-start=.text=0xfc002000 \
        &&
arm-none-eabi-objcopy -R .ignoring -O binary kernel7.elf kernel7.img &&

echo Image built, disassembling &&
time arm-none-eabi-objdump -x --disassemble-all kernel7.elf > kernel7.dump
