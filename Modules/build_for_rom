#! /bin/bash -

GCC=arm-none-eabi-gcc-9.2.1
OBJDUMP=arm-none-eabi-objdump
OBJCOPY=arm-none-eabi-objcopy

MOD=$1
shift ; # All other parameters are passed to gcc

M=$( dirname $MOD ) &&
if [ "$M" == "." ]
then SRC=Modules/$MOD ; M=$MOD
else SRC=$MOD
fi

if [ -d $SRC/Resources ]; then
  build_resources_h $SRC
fi &&

MODNAME=$( basename ${MOD} )

# New modules often have a user mode component; they can
# locate whatever workspace they like at usrbase (but they
# have to allocate the memory first).

$GCC  $SRC/*.c -o Generated/${MODNAME}.elf -Wall \
      -Wl,--no-dynamic-linker \
      -nostartfiles -nostdlib -fno-zero-initialized-in-bss -O4 \
      -g -march=armv8-a+nofp -T Modules/script \
      -Wall -static -fpie -static-pie \
      -I . -I OSTask -I Modules -I Legacy -I Devices \
      -Wl,--defsym=usrbase=0x8000 \
      -fno-toplevel-reorder $* &&

$OBJCOPY -R .ignoring -O binary Generated/${MODNAME}.elf Generated/${MODNAME},ffa &&

$OBJCOPY -I binary -O elf32-littlearm -B armv7 \
        --redefine-sym _binary_Generated_${MODNAME}_ffa_start=${MODNAME}_header \
        --rename-section .data=.romimage \
        Generated/${MODNAME},ffa Generated/${MODNAME}.o &&

$OBJDUMP -x --disassemble-all Generated/${MODNAME}.elf > Generated/${MODNAME}.dump
